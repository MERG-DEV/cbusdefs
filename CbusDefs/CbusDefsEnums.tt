<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".cs" #>
<#
	// These prefixes are to be removed.
	var enumNameUnwantedPrefixes =
		new []
		{
			"Cbus",
			"SASP_",
			"CMDERR_",
			"PAR_",
			"ERR_",
			"MANU_",
			"MTYP_",
			"OPC_",
			"PF_",
			"CPUM_",
			"SSTAT_",
			"TMOD_",
		};

	var data = new List<(string Type, string Name, string Value, string Comment)>();
	{
		var filename = Path.GetFullPath(this.Host.ResolvePath(@"..\cbusdefs.csv"));
		var text = File.ReadLines(filename);
		var regex = new Regex(@"^(\w+),(\w+)?,(\w+)?,(.*)?$");
		foreach (var line in text)
		{
			var matches = regex.Matches(line);
			if (matches.Count == 0) continue;
			var groups = matches[0];
			if (!groups.Success) continue;
			var type = groups.Groups[1].Value;
			var name = groups.Groups[2].Value;
			var value = groups.Groups[3].Value;
			var comment = groups.Groups[4].Value;
			data.Add((Type: type, Name: name, Value: value, Comment: comment));
		}
	}
	var enumNames =
		data.Select(n => n.Type)
			.Where(n => n != "comment")
			.Distinct()
			.Select(n => (EnumName: n.Replace("Cbus", string.Empty), Type: n))
			.OrderBy(n => n)
			.ToList();
#>
/* DO NOT EDIT THIS FILE.
 * This file is automatically generated from cbusdefs.csv
 */

namespace merg.cbus
{
<#	{
		var pattern = $@"^({string.Join("|", enumNameUnwantedPrefixes.Select(n => $"(?:{n})"))})";
		var regex = new Regex(pattern);
		var textInfo = CultureInfo.CurrentCulture.TextInfo;

		foreach (var item in data.Where(n => n.Type == "comment"))
		{ #>
    // <#= item.Comment #>
<#		}
		foreach (var enumName in enumNames)
		{ #>

    /// <summary>
<#			foreach(var item in data.Where(n => n.Type == enumName.Type && string.IsNullOrEmpty(n.Name) && string.IsNullOrEmpty(n.Value) && !string.IsNullOrEmpty(n.Comment)))
			{ #>
    /// <#= item.Comment #>
<#			} #>
    /// </summary>
    public enum <#= enumName.EnumName #>
    {
<#
			foreach (var item in data.Where(n => n.Type == enumName.Type && !string.IsNullOrEmpty(n.Name) && !string.IsNullOrEmpty(n.Value)))
			{ #>

<#				if (!string.IsNullOrEmpty(item.Comment))
				{ #>
        /// <summary>
        /// <#= item.Comment #>
        /// </summary>
<#				}

				// Remove the unwanted prefixes.
				var name = regex.Replace(item.Name, string.Empty);
				// Convert to PascalCase.
				name = textInfo.ToTitleCase(name.ToLower().Replace("_", " ")).Replace(" ", string.Empty);
#>
        <#= name #> = <#= item.Value #>, // <#= item.Name #>
<#			} #>
    }
<#		}
	} #>
}
