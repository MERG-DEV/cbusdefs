; DO NOT EDIT THIS FILE.
; This file is automatically generated by D:\Projects\CBUS\merg\cbusdefs\generate.sh from cbusdefs.csv

; 		,,,,,,,
; 		Copyright (C) Pete Brownlow 2011-2020   software@upsys.co.uk,,,,,,,
; 		Originally derived from opcodes.h (c) Andrew Crosland.,,,,,,,
; 		CSV version by Ian Hogg inspired by David W Radcliffe,,,,,,,
; 		,,,,,,,
; 		Ver 8t,,,,,,,
; 		,,,,,,,
; 		  This work is licensed under the:,,,,,,,
; 		      Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.,,,,,,,
; 		  To view a copy of this license, visit:,,,,,,
; 		      http://creativecommons.org/licenses/by-nc-sa/4.0/,,,,,,,
; 		  or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.,,,
; 		,,,,,,,
; 		  License summary:,,,,,,,
; 		    You are free to:,,,,,,,
; 		      Share, copy and redistribute the material in any medium or format,,,,,,
; 		      Adapt, remix, transform, and build upon the material,,,,
; 		,,,,,,,
; 		    The licensor cannot revoke these freedoms as long as you follow the license terms.,,,,,,,
; 		,,,,,,,
; 		    Attribution : You must give appropriate credit, provide a link to the license,,,,,,
; 		                   and indicate if changes were made. You may do so in any reasonable manner,,,,,,,
; 		                   but not in any way that suggests the licensor endorses you or your use.,,,,,,,
; 		,,,,,,,
; 		    NonCommercial : You may not use the material for commercial purposes. **(see note below),,,,,,,
; 		,,,,,,,
; 		    ShareAlike : If you remix, transform, or build upon the material, you must distribute,,,,
; 		                  your contributions under the same license as the original.,,,,,,,
; 		,,,,,,,
; 		    No additional restrictions : You may not apply legal terms or technological measures that,,,,,,,
; 		                                  legally restrict others from doing anything the license permits.,,,,,,,
; 		,,,,,,,
; 		   ** For commercial use, please contact the original copyright holder(s) to agree licensing terms,,,,,,
; 		,,,,,,,
; 		    This software is distributed in the hope that it will be useful, but WITHOUT ANY,,,,,,
; 		    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE,,,,,,,
; 		,,,,,,,
; 		Version history:,,,,,,,
; 		Pete Brownlow,06/04/2011,Original from spec version 7e,,,,,
; 		Roger Healey,06/04/2011,Add OPC_CMDERR response codes,,,,,
; 		Pete Brownlow,07/06/2011,Updated to spec ver 7f and add new module ids,,,,,
; 		Pete Brownlow,04/07/2011,Updated to spec ver 7g,,,,,
; 		Pete Brownlow,14/08/2011,Updated to spec ver 7h,,,,,
; 		Pete Brownlow,18/02/2012,Updated to spec ver 8a, Rocrail and animated modeller module types added,,,,
; 		Pete Brownlow,10/04/2012,Updated to spec ver 8b, extended parameter bytes,,,,
; 		Pete Brownlow,17/04/2012,Updated parameter block definitions, added processor type definitions.,,,,
; 		Roger Healey,13/07/2012,Add CANTOTI,,,,,
; 		Pete Brownlow,15/09/2012,Updated to spec ver 8c, added 0x5D ENUM and 0x75 CANID,,,,
; 		Pete Brownlow,04/01/2013,Ver 8d New module types, added 0x5E  NNRST,,,,
; 		Roger Healey,15/02/2013,Now at version d. Added new Module Ids (as per ModuleIds Issue 9) and,,,,,
; 		         Align Processor Ids with constants.inc,,,,,,,
; 		         Added .(fullstop) before each processor Id > 9,,,,,,,
; 		         Added OPC_NNRST,,,,,,,
; 		Roger Healey,27/04/2013,Added CANSIG8 and CANSIG64,,,,,
; 		Roger Healey,06/08/2013,Added CANCOND8C,,,,,
; 		Roger Healey,22/01/2014,Added CANPAN, CANACE3C, CANPanel and CANMIO,,,
; 		Pete Brownlow,22/01/2014,Ver 8g New module types, OPC_NNRST & OPC_NNRSM, catch up with .inc file,,,
; 		         Added parameter definitions for manufacturer's CPU id,,,,,,,
; 		         Added extern C so can be included by c++ code,,,,,,,
; 		         Fixed CANGC1e type definition,,,,,,,
; 		Phil Wheeler,01/02/2014,Corrected some typos. Added PRM_BETA, dotted some more decimal numbers,,,,
; 		Phil Wheeler,09/03/2014,Corrected CANSIG MTYP definitions,,,,,
; 		Pete Brownlow,19/04/2014,Ver 8h Added module type defs for CANTOTIMIO, CANACE8MIO, CANBIP, CANSOL,,
; 		Pete Brownlow,06/07/2015,Ver 8j Add new module types as per modules definitions v17 : CANCDU, CANACC4CDU, CANWiBase, WiCAB, CANWiFi, CANFTT
; 		         Add new opcode ALOC, added CPU manufacturer code CPUM_ATMEL,,,,,,
; 		Mike Bolton,02/03/2016,Ver 8k    Add module type CANRFID8,,,,,
; 		Pete Brownlow,02/07/2016,Ver 8m Add new module types CANHNDST, CANTCHNDST, CANmchRFID and CANPiWi,,,
; 		         Add processor codes for ARM chips used in Raspberry Pi's,,,,,,,
; 		Pete Brownlow,16/02/2017,Ver 8n Add module ids to bring it up to module ids document ver 25,,,,,
; 		Pete Brownlow,29/07/2017,Ver 8p Add new module ids and new cab signalling opcode,,,,,
; 		Pete Brownlow,09/01/2018,Ver 8q Add new parameter flag for module can consume its own events,,,,,
; 		Ian Hogg,11/09/2018,Ver 8r Added CANACE16CMIO, CANPiNODE, CANDISP, CANCOMPUTE,,
; 		Richard Crawshaw,29/02/2020,Fixed order of columns in CbusCabSigAspect2.,,,,,
; 		Pete Brownlow,01/09/2020,Ver 8s for additional module ids defined in the ModuleIds file ver 33.,,,,,
; 		                       Updated descriptive comments for some module types,,,,,,,
; 		                       Updated CABDAT opcode to match RFC0004,,,,,,,
; 		Pete Brownlow,06/09/2020,Ver 8t Added module type for CANRCOM. Fixed: Opcode for CABDAT, names for CANRC522 and CANMAG,,,,
; 		,,,,,,,
; CBUS Manufacturer definitions,,,,,,,
; Where the manufacturer already has an NMRA code, this is used,,,,,,
; ,,,,,,,
MANU_MERG	equ .165	; http://www.merg.co.uk,,,,,,,
MANU_ROCRAIL	equ .70	; http://www.rocrail.net,,,,,,,
MANU_SPECTRUM	equ .80	; http://animatedmodeler.com  (Spectrum Engineering),,,,,,,
; ,,,,,,,
; MODULE TYPES,,,,,,,
; ,,,,,,,
; Please note that the existance of a module type id does not necessarily mean that firmware has been implemented,,,,,,,
; ,,,,,,,
; MERG Module types,,,,,,,
; ,,,,,,,
MTYP_SLIM	equ .0	; default for SLiM nodes,,,,,,,
MTYP_CANACC4	equ .1	; Solenoid point driver,,,,,,,
MTYP_CANACC5	equ .2	; Motorised point driver,,,,,,,
MTYP_CANACC8	equ .3	; 8 digital outputs,,,,,,,
MTYP_CANACE3	equ .4	; Control panel switch/button encoder,,,,,,,
MTYP_CANACE8C	equ .5	; 8 digital inputs,,,,,,,
MTYP_CANLED	equ .6	; 64 led driver,,,,,,,
MTYP_CANLED64	equ .7	; 64 led driver (multi leds per event),,,,,,,
MTYP_CANACC4_2	equ .8	; 12v version of CANACC4,,,,,,,
MTYP_CANCAB	equ .9	; CANCAB hand throttle,,,,,,,
MTYP_CANCMD	equ .10	; CANCMD command station,,,,,,,
MTYP_CANSERVO	equ .11	; 8 servo driver (on canacc8 or similar hardware),,,,,,,
MTYP_CANBC	equ .12	; BC1a command station,,,,,,,
MTYP_CANRPI	equ .13	; RPI and RFID interface,,,,,,,
MTYP_CANTTCA	equ .14	; Turntable controller (turntable end),,,,,,,
MTYP_CANTTCB	equ .15	; Turntable controller (control panel end),,,,,,,
MTYP_CANHS	equ .16	; Handset controller for old BC1a type handsets,,,,,,,
MTYP_CANTOTI	equ .17	; Track occupancy detector,,,,,,,
MTYP_CAN8I8O	equ .18	; 8 inputs 8 outputs,,,,,,,
MTYP_CANSERVO8C	equ .19	; Canservo with servo position feedback,,,,,,,
MTYP_CANRFID	equ .20	; RFID input,,,,,,,
MTYP_CANTC4	equ .21	; ,,,,,,,
MTYP_CANACE16C	equ .22	; 16 inputs,,,,,,,
MTYP_CANIO8	equ .23	; 8 way I/O,,,,,,,
MTYP_CANSNDX	equ .24	; ??,,,,,,,
MTYP_CANEther	equ .25	; Ethernet interface,,,,,,,
MTYP_CANSIG64	equ .26	; Multiple aspect signalling for CANLED module,,,,,,,
MTYP_CANSIG8	equ .27	; Multiple aspect signalling for CANACC8 module,,,,,,,
MTYP_CANCOND8C	equ .28	; Conditional event generation,,,,,,,
MTYP_CANPAN	equ .29	; Control panel 32/32,,,,,,,
MTYP_CANACE3C	equ .30	; Newer version of CANACE3 firmware,,,,,,,
MTYP_CANPanel	equ .31	; Control panel 64/64,,,,,,,
MTYP_CANMIO	equ .32	; Multiple I/O â€“ Universal CANMIO firmware,,,,,,,
MTYP_CANACE8MIO	equ .33	; Multiple IO module 16 inputs emulating CANACE8C on CANMIO hardware,,,,,,,
MTYP_CANSOL	equ .34	; Solenoid driver module,,,,,,,
MTYP_CANBIP	equ .35	; Universal CANBIP firmware - Bipolar IO module with additional 8 I/O pins (CANMIO family),,,,,,,
MTYP_CANCDU	equ .36	; Solenoid driver module with additional 6 I/O pins (CANMIO family),,,,,,,
MTYP_CANACC4CDU	equ .37	; CANACC4 firmware ported to CANCDU,,,,,,,
MTYP_CANWiBase	equ .38	; CAN to MiWi base station,,,,,,,
MTYP_WiCAB	equ .39	; Wireless cab using MiWi protocol,,,,,,,
MTYP_CANWiFi	equ .40	; CAN to WiFi connection with Withrottle to CBUS protocol conversion,,,,,,,
MTYP_CANFTT	equ .41	; Turntable controller configured using FLiM,,,,,,,
MTYP_CANHNDST	equ .42	; Handset (alternative to CANCAB),,,,,,,
MTYP_CANTCHNDST	equ .43	; Touchscreen handset,,,,,,,
MTYP_CANRFID8	equ .44	; multi-channel RFID reader,,,,,,,
MTYP_CANmchRFID	equ .45	; either a 2ch or 8ch RFID reader,,,,,,,
MTYP_CANPiWi	equ .46	; a Raspberry Pi based module for WiFi,,,,,,,
MTYP_CAN4DC	equ .47	; DC train controller,,,,,,,
MTYP_CANELEV	equ .48	; Nelevator controller,,,,,,,
MTYP_CANSCAN	equ .49	; 128 switch inputs,,,,,,,
MTYP_CANMIO_SVO	equ .50	; 16MHz 25k80 version of CANSERVO8c on CANMIO hardware,,,,,,,
MTYP_CANMIO_INP	equ .51	; 16MHz 25k80 version of CANACE8MIO on CANMIO hardware,,,,,,,
MTYP_CANMIO_OUT	equ .52	; 16MHz 25k80 version of CANACC8 on CANMIO hardware,,,,,,,
MTYP_CANBIP_OUT	equ .53	; 16MHz 25k80 version of CANACC5 on CANBIP hardware,,,,,,,
MTYP_CANASTOP	equ .54	; DCC stop generator,,,,,,,
MTYP_CANCSB	equ .55	; CANCMD with on board 3A booster,,,,,,,
MTYP_CANMAG	equ .56	; Magnet on Track detector,,,,,,,
MTYP_CANACE16CMIO	equ .57	; 16 input equivaent to CANACE8C,,,,,,,
MTYP_CANPiNODE	equ .58	; CBUS module based on Raspberry Pi,,,,,,,
MTYP_CANDISP	equ .59	; 25K80 version of CANLED64 (IHart and MB),,,,,,,
MTYP_CANCOMPUTE	equ .60	; Compute Event processing engine,,,,,,,
MTYP_CANRC522	equ .61	; Read/Write from/to RC522 RFID tags,,,,,,,
MTYP_CANINP	equ .62	; 8 inputs module (2g version of CANACE8c),,,,,,,
MTYP_CANOUT	equ .63	; 8 outputs module (2g version of CANACC8),,,,,,,
MTYP_CANEMIO	equ .64	; Extended CANMIO (24 I/O ports),,,,,,,
MTYP_CANCABDC	equ .65	; DC cab,,,,,,,
MTYP_CANRCOM	equ .66	; DC Railcom detector/reader,,,,,,,
; ,,,,,,,
; At the time of writing the list of defined MERG module types is maintained by Roger Healey,,,,,,,
; Please liaise with Roger before adding new module types,,,,,,,
; ,,,,,,,
MTYP_CAN_SW	equ 0xFF	; Software nodes,,,,,,,
MTYP_EMPTY	equ 0xFE	; Empty module, bootloader only,,,,,,
MTYP_CANUSB	equ 0xFD	; USB interface,,,,,,,
; ,,,,,,,
; Rocrail Module types,,,,,,,
; ,,,,,,,
MTYP_CANGC1	equ .1	; RS232 PC interface,,,,,,,
MTYP_CANGC2	equ .2	; 16 I/O,,,,,,,
MTYP_CANGC3	equ .3	; Command station (derived from cancmd),,,,,,,
MTYP_CANGC4	equ .4	; 8 channel RFID reader,,,,,,,
MTYP_CANGC5	equ .5	; Cab for fixed panels (derived from cancab),,,,,,,
MTYP_CANGC6	equ .6	; 4 channel servo controller,,,,,,,
MTYP_CANGC7	equ .7	; Fast clock module,,,,,,,
MTYP_CANGC1e	equ .11	; CAN<->Ethernet interface,,,,,,,
; ,,,,,,,
; Spectrum Engineering Animated Modeller module types,,,,,,,
; ,,,,,,,
MTYP_AMCTRLR	equ .1	; Animation controller (firmware derived from cancmd),,,,,,,
MTYP_DUALCAB	equ .2	; Dual cab based on cancab,,,,,,,
; ,,,,,,,
; ,,,,,,,
; CBUS opcodes list,,,,,,,
; ,,,,,,,
; Packets with no data bytes,,,,,,,
; ,,,,,,,
OPC_ACK	equ 0x00	; General ack,,,,,,,
OPC_NAK	equ 0x01	; General nak,,,,,,,
OPC_HLT	equ 0x02	; Bus Halt,,,,,,,
OPC_BON	equ 0x03	; Bus on,,,,,,,
OPC_TOF	equ 0x04	; Track off,,,,,,,
OPC_TON	equ 0x05	; Track on,,,,,,,
OPC_ESTOP	equ 0x06	; Track stopped,,,,,,,
OPC_ARST	equ 0x07	; System reset,,,,,,,
OPC_RTOF	equ 0x08	; Request track off,,,,,,,
OPC_RTON	equ 0x09	; Request track on,,,,,,,
OPC_RESTP	equ 0x0a	; Request emergency stop all,,,,,,,
OPC_RSTAT	equ 0x0c	; Request node status,,,,,,,
OPC_QNN	equ 0x0d	; Query nodes,,,,,,,
; ,,,,,,,
OPC_RQNP	equ 0x10	; Read node parameters,,,,,,,
OPC_RQMN	equ 0x11	; Request name of module type,,,,,,,
; ,,,,,,,
; Packets with 1 data byte,,,,,,,
; ,,,,,,,
OPC_KLOC	equ 0x21	; Release engine by handle,,,,,,,
OPC_QLOC	equ 0x22	; Query engine by handle,,,,,,,
OPC_DKEEP	equ 0x23	; Keep alive for cab,,,,,,,
; ,,,,,,,
OPC_DBG1	equ 0x30	; Debug message with 1 status byte,,,,,,,
OPC_EXTC	equ 0x3F	; Extended opcode,,,,,,,
; ,,,,,,,
; Packets with 2 data bytes,,,,,,,
; ,,,,,,,
OPC_RLOC	equ 0x40	; Request session for loco,,,,,,,
OPC_QCON	equ 0x41	; Query consist,,,,,,,
OPC_SNN	equ 0x42	; Set node number,,,,,,,
OPC_ALOC	equ 0X43	; Allocate loco (used to allocate to a shuttle in cancmd),,,,,,,
; ,,,,,,,
OPC_STMOD	equ 0x44	; Set Throttle mode,,,,,,,
OPC_PCON	equ 0x45	; Consist loco,,,,,,,
OPC_KCON	equ 0x46	; De-consist loco,,,,,,,
OPC_DSPD	equ 0x47	; Loco speed/dir,,,,,,,
OPC_DFLG	equ 0x48	; Set engine flags,,,,,,,
OPC_DFNON	equ 0x49	; Loco function on,,,,,,,
OPC_DFNOF	equ 0x4A	; Loco function off,,,,,,,
OPC_SSTAT	equ 0x4C	; Service mode status,,,,,,,
OPC_NNRSM	equ 0x4F	; Reset to manufacturer's defaults,,,,,,,
; ,,,,,,,
OPC_RQNN	equ 0x50	; Request Node number in setup mode,,,,,,,
OPC_NNREL	equ 0x51	; Node number release,,,,,,,
OPC_NNACK	equ 0x52	; Node number acknowledge,,,,,,,
OPC_NNLRN	equ 0x53	; Set learn mode,,,,,,,
OPC_NNULN	equ 0x54	; Release learn mode,,,,,,,
OPC_NNCLR	equ 0x55	; Clear all events,,,,,,,
OPC_NNEVN	equ 0x56	; Read available event slots,,,,,,,
OPC_NERD	equ 0x57	; Read all stored events,,,,,,,
OPC_RQEVN	equ 0x58	; Read number of stored events,,,,,,,
OPC_WRACK	equ 0x59	; Write acknowledge,,,,,,,
OPC_RQDAT	equ 0x5A	; Request node data event,,,,,,,
OPC_RQDDS	equ 0x5B	; Request short data frame,,,,,,,
OPC_BOOT	equ 0x5C	; Put node into boot mode,,,,,,,
OPC_ENUM	equ 0x5D	; Force can_id self enumeration,,,,,,,
OPC_NNRST	equ 0x5E	; Reset node (as in restart),,,,,,,
OPC_EXTC1	equ 0x5F	; Extended opcode with 1 data byte,,,,,,,
; ,,,,,,,
; Packets with 3 data bytes,,,,,,,
; ,,,,,,,
OPC_DFUN	equ 0x60	; Set engine functions,,,,,,,
OPC_GLOC	equ 0x61	; Get loco (with support for steal/share),,,,,,,
OPC_ERR	equ 0x63	; Command station error,,,,,,,
OPC_CMDERR	equ 0x6F	; Errors from nodes during config,,,,,,,
; ,,,,,,,
OPC_EVNLF	equ 0x70	; Event slots left response,,,,,,,
OPC_NVRD	equ 0x71	; Request read of node variable,,,,,,,
OPC_NENRD	equ 0x72	; Request read stored event by index,,,,,,,
OPC_RQNPN	equ 0x73	; Request read module parameters,,,,,,,
OPC_NUMEV	equ 0x74	; Number of events stored response,,,,,,,
OPC_CANID	equ 0x75	; Set canid,,,,,,,
OPC_EXTC2	equ 0x7F	; Extended opcode with 2 data bytes,,,,,,,
; ,,,,,,,
; Packets with 4 data bytes,,,,,,,
; ,,,,,,,
OPC_RDCC3	equ 0x80	; 3 byte DCC packet,,,,,,,
OPC_WCVO	equ 0x82	; Write CV byte Ops mode by handle,,,,,,,
OPC_WCVB	equ 0x83	; Write CV bit Ops mode by handle,,,,,,,
OPC_QCVS	equ 0x84	; Read CV,,,,,,,
OPC_PCVS	equ 0x85	; Report CV,,,,,,,
; ,,,,,,,
OPC_ACON	equ 0x90	; on event,,,,,,,
OPC_ACOF	equ 0x91	; off event,,,,,,,
OPC_AREQ	equ 0x92	; Accessory Request event,,,,,,,
OPC_ARON	equ 0x93	; Accessory response event on,,,,,,,
OPC_AROF	equ 0x94	; Accessory response event off,,,,,,,
OPC_EVULN	equ 0x95	; Unlearn event,,,,,,,
OPC_NVSET	equ 0x96	; Set a node variable,,,,,,,
OPC_NVANS	equ 0x97	; Node variable value response,,,,,,,
OPC_ASON	equ 0x98	; Short event on,,,,,,,
OPC_ASOF	equ 0x99	; Short event off,,,,,,,
OPC_ASRQ	equ 0x9A	; Short Request event,,,,,,,
OPC_PARAN	equ 0x9B	; Single node parameter response,,,,,,,
OPC_REVAL	equ 0x9C	; Request read of event variable,,,,,,,
OPC_ARSON	equ 0x9D	; Accessory short response on event,,,,,,,
OPC_ARSOF	equ 0x9E	; Accessory short response off event,,,,,,,
OPC_EXTC3	equ 0x9F	; Extended opcode with 3 data bytes,,,,,,,
; ,,,,,,,
; Packets with 5 data bytes,,,,,,,
; ,,,,,,,
OPC_RDCC4	equ 0xA0	; 4 byte DCC packet,,,,,,,
OPC_WCVS	equ 0xA2	; Write CV service mode,,,,,,,
; ,,,,,,,
OPC_ACON1	equ 0xB0	; On event with one data byte,,,,,,,
OPC_ACOF1	equ 0xB1	; Off event with one data byte,,,,,,,
OPC_REQEV	equ 0xB2	; Read event variable in learn mode,,,,,,,
OPC_ARON1	equ 0xB3	; Accessory on response (1 data byte),,,,,,,
OPC_AROF1	equ 0xB4	; Accessory off response (1 data byte),,,,,,,
OPC_NEVAL	equ 0xB5	; Event variable by index read response,,,,,,,
OPC_PNN	equ 0xB6	; Response to QNN,,,,,,,
OPC_ASON1	equ 0xB8	; Accessory short on with 1 data byte,,,,,,,
OPC_ASOF1	equ 0xB9	; Accessory short off with 1 data byte,,,,,,,
OPC_ARSON1	equ 0xBD	; Short response event on with one data byte,,,,,,,
OPC_ARSOF1	equ 0xBE	; Short response event off with one data byte,,,,,,,
OPC_EXTC4	equ 0xBF	; Extended opcode with 4 data bytes,,,,,,,
; ,,,,,,,
; Packets with 6 data bytes,,,,,,,
; ,,,,,,,
OPC_RDCC5	equ 0xC0	; 5 byte DCC packet,,,,,,,
OPC_WCVOA	equ 0xC1	; Write CV ops mode by address,,,,,,,
OPC_CABDAT	equ 0xC2	; Cab data (cab signalling),,,,,,,
OPC_FCLK	equ 0xCF	; Fast clock,,,,,,,
; ,,,,,,,
OPC_ACON2	equ 0xD0	; On event with two data bytes,,,,,,,
OPC_ACOF2	equ 0xD1	; Off event with two data bytes,,,,,,,
OPC_EVLRN	equ 0xd2	; Teach event,,,,,,,
OPC_EVANS	equ 0xd3	; Event variable read response in learn mode,,,,,,,
OPC_ARON2	equ 0xD4	; Accessory on response,,,,,,,
OPC_AROF2	equ 0xD5	; Accessory off response,,,,,,,
OPC_ASON2	equ 0xD8	; Accessory short on with 2 data bytes,,,,,,,
OPC_ASOF2	equ 0xD9	; Accessory short off with 2 data bytes,,,,,,,
OPC_ARSON2	equ 0xDD	; Short response event on with two data bytes,,,,,,,
OPC_ARSOF2	equ 0xDE	; Short response event off with two data bytes,,,,,,,
OPC_EXTC5	equ 0xDF	; Extended opcode with 5 data bytes,,,,,,,
; ,,,,,,,
; Packets with 7 data bytes,,,,,,,
; ,,,,,,,
OPC_RDCC6	equ 0xE0	; 6 byte DCC packets,,,,,,,
OPC_PLOC	equ 0xE1	; Loco session report,,,,,,,
OPC_NAME	equ 0xE2	; Module name response,,,,,,,
OPC_STAT	equ 0xE3	; Command station status report,,,,,,,
OPC_PARAMS	equ 0xEF	; Node parameters response,,,,,,,
; ,,,,,,,
OPC_ACON3	equ 0xF0	; On event with 3 data bytes,,,,,,,
OPC_ACOF3	equ 0xF1	; Off event with 3 data bytes,,,,,,,
OPC_ENRSP	equ 0xF2	; Read node events response,,,,,,,
OPC_ARON3	equ 0xF3	; Accessory on response,,,,,,,
OPC_AROF3	equ 0xF4	; Accessory off response,,,,,,,
OPC_EVLRNI	equ 0xF5	; Teach event using event indexing,,,,,,,
OPC_ACDAT	equ 0xF6	; Accessory data event: 5 bytes of node data (eg: RFID),,,,,,,
OPC_ARDAT	equ 0xF7	; Accessory data response,,,,,,,
OPC_ASON3	equ 0xF8	; Accessory short on with 3 data bytes,,,,,,,
OPC_ASOF3	equ 0xF9	; Accessory short off with 3 data bytes,,,,,,,
OPC_DDES	equ 0xFA	; Short data frame aka device data event (device id plus 5 data bytes),,,,,,,
OPC_DDRS	equ 0xFB	; Short data frame response aka device data response,,,,,,,
OPC_DDWS	equ 0xFC	; Device Data Write Short,,,,,,,
OPC_ARSON3	equ 0xFD	; Short response event on with 3 data bytes,,,,,,,
OPC_ARSOF3	equ 0xFE	; Short response event off with 3 data bytes,,,,,,,
OPC_EXTC6	equ 0xFF	; Extended opcode with 6 data byes,,,,,,,
; ,,,,,,,
; ,,,,,,,
; Modes for STMOD,,,,,,,
; ,,,,,,,
TMOD_SPD_MASK	equ .3	; ,,,,,,,
TMOD_SPD_128	equ .0	; ,,,,,,,
TMOD_SPD_14	equ .1	; ,,,,,,,
TMOD_SPD_28I	equ .2	; ,,,,,,,
TMOD_SPD_28	equ .3	; ,,,,,,,
; ,,,,,,,
; Error codes for OPC_ERR,,,,,,,
; ,,,,,,,
ERR_LOCO_STACK_FULL	equ .1	; ,,,,,,,
ERR_LOCO_ADDR_TAKEN	equ .2	; ,,,,,,,
ERR_SESSION_NOT_PRESENT	equ .3	; ,,,,,,,
ERR_CONSIST_EMPTY	equ .4	; ,,,,,,,
ERR_LOCO_NOT_FOUND	equ .5	; ,,,,,,,
ERR_CMD_RX_BUF_OFLOW	equ .6	; ,,,,,,,
ERR_INVALID_REQUEST	equ .7	; ,,,,,,,
ERR_SESSION_CANCELLED	equ .8	; ,,,,,,,
; ,,,,,,,
; Status codes for OPC_SSTAT,,,,,,,
; ,,,,,,,
SSTAT_NO_ACK	equ .1	; ,,,,,,,
SSTAT_OVLD	equ .2	; ,,,,,,,
SSTAT_WR_ACK	equ .3	; ,,,,,,,
SSTAT_BUSY	equ .4	; ,,,,,,,
SSTAT_CV_ERROR	equ .5	; ,,,,,,,
; ,,,,,,,
; Error codes for OPC_CMDERR,,,,,,,
; ,,,,,,,
CMDERR_INV_CMD	equ .1	; ,,,,,,,
CMDERR_NOT_LRN	equ .2	; ,,,,,,,
CMDERR_NOT_SETUP	equ .3	; ,,,,,,,
CMDERR_TOO_MANY_EVENTS	equ .4	; ,,,,,,,
CMDERR_NO_EV	equ .5	; ,,,,,,,
CMDERR_INV_EV_IDX	equ .6	; ,,,,,,,
CMDERR_INVALID_EVENT	equ .7	; ,,,,,,,
CMDERR_INV_EN_IDX	equ .8	; now reserved,,,,,,,
CMDERR_INV_PARAM_IDX	equ .9	; ,,,,,,,
CMDERR_INV_NV_IDX	equ .10	; ,,,,,,,
CMDERR_INV_EV_VALUE	equ .11	; ,,,,,,,
CMDERR_INV_NV_VALUE	equ .12	; ,,,,,,,
; ,,,,,,,
; Sub opcodes for OPC_CABDAT,,,,,,,
; ,,,,,,,
CDAT_CABSIG	equ .1	; ,,,,,,,
; ,,,,,,,
; Aspect codes for CDAT_CABSIG,,,,,,,
; ,,,,,,,
; First aspect byte,,,,,,,
; ,,,,,,,
SASP_DANGER	equ .0	; ,,,,,,,
SASP_CAUTION	equ .1	; ,,,,,,,
SASP_PRELIM_CAUTION	equ .2	; ,,,,,,,
SASP_PROCEED	equ .3	; ,,,,,,,
SASP_CALLON	equ .4	; Set bit 2 for call-on - main aspect will usually be at danger,,,,,,,
SASP_THEATRE	equ .8	; Set bit 3 to 0 for upper nibble is feather lcoation, set 1 for upper nibble is theatre code,,,,,,
; ,,,,,,,
; Aspect codes for CDAT_CABSIG,,,,,,,
; ,,,,,,,
; Second Aspect byte,,,,,,,
; ,,,,,,,
SASP_LIT	equ .0	; Set bit 0 to indicate lit,,,,,,,
SASP_LUNAR	equ .1	; Set bit 1 for lunar indication,,,,,,,
; ,,,,,,,
; Remaining bits in second aspect byte yet to be defined - can be used for other signalling systems,,,,,,,
; ,,,,,,,
; ,,,,,,,
; Parameter index numbers (readable by OPC_RQNPN, returned in OPC_PARAN),,,,,,
; Index numbers count from 1, subtract 1 for offset into parameter block,,,,,,
; Note that RQNPN with index 0 returns the parameter count,,,,,,,
; ,,,,,,,
PAR_MANU	equ .1	; Manufacturer id,,,,,,,
PAR_MINVER	equ .2	; Minor version letter,,,,,,,
PAR_MTYP	equ .3	; Module type code,,,,,,,
PAR_EVTNUM	equ .4	; Number of events supported,,,,,,,
PAR_EVNUM	equ .5	; Event variables per event,,,,,,,
PAR_NVNUM	equ .6	; Number of Node variables,,,,,,,
PAR_MAJVER	equ .7	; Major version number,,,,,,,
PAR_FLAGS	equ .8	; Node flags,,,,,,,
PAR_CPUID	equ .9	; Processor type,,,,,,,
PAR_BUSTYPE	equ .10	; Bus type,,,,,,,
PAR_LOAD	equ .11	; load address, 4 bytes,,,,,,
PAR_CPUMID	equ .15	; CPU manufacturer's id as read from the chip config space, 4 bytes (note - read from cpu at runtime, so not included in checksum),,,,,
PAR_CPUMAN	equ .19	;  CPU manufacturer code,,,,,,,
PAR_BETA	equ .20	; Beta revision (numeric), or 0 if release,,,,,,
; ,,,,,,,
; Offsets to other values stored at the top of the parameter block.,,,,,,,
; These are not returned by opcode PARAN, but are present in the hex,,,,,,
; file for FCU.,,,,,,,
; ,,,,,,,
PAR_COUNT	equ 0x18	; Number of parameters implemented,,,,,,,
PAR_NAME	equ 0x1A	; 4 byte Address of Module type name, up to 8 characters null terminated,,,,,,
PAR_CKSUM	equ 0x1E	; Checksum word at end of parameters,,,,,,,
; ,,,,,,,
; Flags in PAR_FLAGS,,,,,,,
; ,,,,,,,
PF_NOEVENTS	equ .0	; Modules doesn't support events,,,,,,,
PF_CONSUMER	equ .1	; Module is a consumer of events,,,,,,,
PF_PRODUCER	equ .2	; Module is a producer of events,,,,,,,
PF_COMBI	equ .3	; Module is both a consumer and producer of events,,,,,,,
PF_FLiM	equ .4	; Module is in FLiM mode,,,,,,,
PF_BOOT	equ .8	; Module supports the FCU bootloader protocol,,,,,,,
PF_COE	equ .16	; Module can consume its own events,,,,,,,
PF_LRN	equ .32	; Module is in learn mode,,,,,,,
; ,,,,,,,
; BUS type that module is connected to,,,,,,,
; ,,,,,,,
PB_CAN	equ .1	; ,,,,,,,
PB_ETH	equ .2	; ,,,,,,,
PB_MIWI	equ .3	; ,,,,,,,
; ,,,,,,,
; Processor manufacturer codes,,,,,,,
; ,,,,,,,
CPUM_MICROCHIP	equ .1	; ,,,,,,,
CPUM_ATMEL	equ .2	; ,,,,,,,
CPUM_ARM	equ .3	; ,,,,,,,
; ,,,,,,,
; Microchip Processor type codes (identifies to FCU for bootload compatiblity),,,,,,,
; ,,,,,,,
P18F2480	equ .1	; ,,,,,,,
P18F4480	equ .2	; ,,,,,,,
P18F2580	equ .3	; ,,,,,,,
P18F4580	equ .4	; ,,,,,,,
P18F2585	equ .5	; ,,,,,,,
P18F4585	equ .6	; ,,,,,,,
P18F2680	equ .7	; ,,,,,,,
P18F4680	equ .8	; ,,,,,,,
P18F2682	equ .9	; ,,,,,,,
P18F4682	equ .10	; ,,,,,,,
P18F2685	equ .11	; ,,,,,,,
P18F4685	equ .12	; ,,,,,,,
; ,,,,,,,
P18F25K80	equ .13	; ,,,,,,,
P18F45K80	equ .14	; ,,,,,,,
P18F26K80	equ .15	; ,,,,,,,
P18F46K80	equ .16	; ,,,,,,,
P18F65K80	equ .17	; ,,,,,,,
P18F66K80	equ .18	; ,,,,,,,
P18F14K22	equ .19	; ,,,,,,,
P18F26K83	equ .20	; ,,,,,,,
P18F27Q84	equ .21	; ,,,,,,,
P18F47Q84	equ .22	; ,,,,,,,
P18F27Q83	equ .23	; ,,,,,,,
; ,,,,,,,
P32MX534F064	equ .30	; ,,,,,,,
P32MX564F064	equ .31	; ,,,,,,,
P32MX564F128	equ .32	; ,,,,,,,
P32MX575F256	equ .33	; ,,,,,,,
P32MX575F512	equ .34	; ,,,,,,,
P32MX764F128	equ .35	; ,,,,,,,
P32MX775F256	equ .36	; ,,,,,,,
P32MX775F512	equ .37	; ,,,,,,,
P32MX795F512	equ .38	; ,,,,,,,
; ,,,,,,,
; ARM Processor type codes (identifies to FCU for bootload compatiblity),,,,,,,
; ,,,,,,,
ARM1176JZF_S	equ .1	; As used in Raspberry Pi,,,,,,,
ARMCortex_A7	equ .2	; As Used in Raspberry Pi 2,,,,,,,
ARMCortex_A53	equ .3	; As used in Raspberry Pi 3,,,,,,,
