/* DO NOT EDIT THIS FILE.
 * This file is automatically generated by ./generate.sh from cbusdefs.csv
 */ 

namespace Merg.Cbus
{

t// 
t// Copyright (C) Pete Brownlow 2011-2020   software@upsys.co.uk
t// Originally derived from opcodes.h (c) Andrew Crosland.
t// CSV version by Ian Hogg inspired by David W Radcliffe
t// 
t// Ver 8t
t// 
t//   This work is licensed under the:
t//       Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
t//   To view a copy of this license, visit:
t//       http://creativecommons.org/licenses/by-nc-sa/4.0/
t//   or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
t// 
t//   License summary:
t//     You are free to:
t//       Share, copy and redistribute the material in any medium or format
t//       Adapt, remix, transform, and build upon the material
t// 
t//     The licensor cannot revoke these freedoms as long as you follow the license terms.
t// 
t//     Attribution : You must give appropriate credit, provide a link to the license,
t//                    and indicate if changes were made. You may do so in any reasonable manner,
t//                    but not in any way that suggests the licensor endorses you or your use.
t// 
t//     NonCommercial : You may not use the material for commercial purposes. **(see note below)
t// 
t//     ShareAlike : If you remix, transform, or build upon the material, you must distribute
t//                   your contributions under the same license as the original.
t// 
t//     No additional restrictions : You may not apply legal terms or technological measures that
t//                                   legally restrict others from doing anything the license permits.
t// 
t//    ** For commercial use, please contact the original copyright holder(s) to agree licensing terms
t// 
t//     This software is distributed in the hope that it will be useful, but WITHOUT ANY
t//     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE
t// 
t// Version history:
t// Pete Brownlow,6/4/11,Original from spec version 7e
t// Roger Healey,6/4/11,Add OPC_CMDERR response codes
t// Pete Brownlow,7/6/11,Updated to spec ver 7f and add new module ids
t// Pete Brownlow,4/7/11,Updated to spec ver 7g
t// Pete Brownlow,14/8/11,Updated to spec ver 7h
t// Pete Brownlow,18/2/12,Updated to spec ver 8a, Rocrail and animated modeller module types added
t// Pete Brownlow,10/4/12,Updated to spec ver 8b, extended parameter bytes
t// Pete Brownlow,17/4/12,Updated parameter block definitions, added processor type definitions.
t// Roger Healey,13/7/12,Add CANTOTI
t// Pete Brownlow,15/9/12,Updated to spec ver 8c, added 0x5D ENUM and 0x75 CANID
t// Pete Brownlow,4/1/13,Ver 8d New module types, added 0x5E  NNRST
t// Roger Healey,15/2/13,Now at version d. Added new Module Ids (as per ModuleIds Issue 9) and
t//          Align Processor Ids with constants.inc
t//          Added .(fullstop) before each processor Id > 9
t//          Added OPC_NNRST
t// Roger Healey,27/4/13,Added CANSIG8 and CANSIG64
t// Roger Healey,6/8/13,Added CANCOND8C
t// Roger Healey,22/1/14,Added CANPAN, CANACE3C, CANPanel and CANMIO
t// Pete Brownlow,22/1/14,Ver 8g New module types, OPC_NNRST & OPC_NNRSM, catch up with .inc file
t//          Added parameter definitions for manufacturer's CPU id
t//          Added extern C so can be included by c++ code
t//          Fixed CANGC1e type definition
t// Phil Wheeler,1/2/14,Corrected some typos. Added PRM_BETA, dotted some more decimal numbers
t// Phil Wheeler,9/3/14,Corrected CANSIG MTYP definitions
t// Pete Brownlow,19/4/14,Ver 8h Added module type defs for CANTOTIMIO, CANACE8MIO, CANBIP, CANSOL
t// Pete Brownlow,06/7/15,Ver 8j Add new module types as per modules definitions v17 : CANCDU, CANACC4CDU, CANWiBase, WiCAB, CANWiFi, CANFTT
t//          Add new opcode ALOC, added CPU manufacturer code CPUM_ATMEL
t// Mike Bolton,2/3/16,Ver 8k    Add module type CANRFID8
t// Pete Brownlow,2/7/16,Ver 8m Add new module types CANHNDST, CANTCHNDST, CANmchRFID and CANPiWi
t//          Add processor codes for ARM chips used in Raspberry Pi's
t// Pete Brownlow,16/2/17,Ver 8n Add module ids to bring it up to module ids document ver 25
t// Pete Brownlow,29/7/17,Ver 8p Add new module ids and new cab signalling opcode
t// Pete Brownlow,09/1/18,Ver 8q Add new parameter flag for module can consume its own events
t// Ian Hogg,11/9/18,Ver 8r Added CANACE16CMIO, CANPiNODE, CANDISP, CANCOMPUTE
t// Richard Crawshaw,29/02/2020,Fixed order of columns in CbusCabSigAspect2.
t// Pete Brownlow,01/09/20,Ver 8s for additional module ids defined in the ModuleIds file ver 33.
t//                        Updated descriptive comments for some module types
t//                        Updated CABDAT opcode to match RFC0004
t// Pete Brownlow,06/09/20,Ver 8t Added module type for CANRCOM. Fixed: Opcode for CABDAT, names for CANRC522 and CANMAG
t// Andrew Crosland,21/09/21,Ver 8t Added PICs P18F14K22 P18F26K83 P18F27Q84 P18F47Q84 and P18F27Q83
t// Duncan Greenwood,21/10/07,Ver 8t Added OPC_DTXC opcode (0xE9) for CBUS long messages
t// 

	/// <summary>
	/// ARM Processor type codes (identifies to FCU for bootload compatiblity)
	/// </summary>
	public enum ArmProcessors
	{
	
		// ARM Processor type codes (identifies to FCU for bootload compatiblity)
	
		/// <summary>As used in Raspberry Pi</summary>
		UALRM1176JZFUSL = 1,
		/// <summary>As Used in Raspberry Pi 2</summary>
		UALRMCortexUAL7 = 2,
		/// <summary>As used in Raspberry Pi 3</summary>
		UALRMCortexUAL53 = 3,
	}

	/// <summary>
	/// BUS type that module is connected to
	/// </summary>
	public enum BusTypes
	{
	
		// BUS type that module is connected to
	
		UPLBUCLAN = 1,
		UPLBUELTH = 2,
		UPLBUMLIWI = 3,
	}

	/// <summary>
	/// Sub opcodes for OPC_CABDAT
	/// </summary>
	public enum CabSigAspect0
	{
	
		// Sub opcodes for OPC_CABDAT
	
		UCLDATUCLABSIG = 1,
	}

	/// <summary>
	/// Aspect codes for CDAT_CABSIG
	/// </summary>
	public enum CabSigAspect1
	{
	
		// Aspect codes for CDAT_CABSIG
	
		// First aspect byte
	
		UDLANGER = 0,
		UCLAUTION = 1,
		UPLRELIMUCLAUTION = 2,
		UPLROCEED = 3,
		/// <summary>Set bit 2 for call-on - main aspect will usually be at danger</summary>
		UCLALLON = 4,
		/// <summary>Set bit 3 to 0 for upper nibble is feather lcoation, set 1 for upper nibble is theatre code</summary>
		UTLHEATRE = 8,
	}

	/// <summary>
	/// Aspect codes for CDAT_CABSIG
	/// </summary>
	public enum CabSigAspect2
	{
	
		// Aspect codes for CDAT_CABSIG
	
		// Second Aspect byte
	
		/// <summary>Set bit 0 to indicate lit</summary>
		ULLIT = 0,
		/// <summary>Set bit 1 for lunar indication</summary>
		ULLUNAR = 1,
	
		// Remaining bits in second aspect byte yet to be defined - can be used for other signalling systems
	}

	/// <summary>
	/// Error codes for OPC_CMDERR
	/// </summary>
	public enum CmdErrs
	{
	
		// Error codes for OPC_CMDERR
	
		UILNVUCLMD = 1,
		UNLOTULLRN = 2,
		UNLOTUSLETUP = 3,
		UTLOOUMLANYUELVENTS = 4,
		UNLOUELV = 5,
		UILNVUELVUILDX = 6,
		UILNVALIDUELVENT = 7,
		/// <summary>now reserved</summary>
		UILNVUELNUILDX = 8,
		UILNVUPLARAMUILDX = 9,
		UILNVUNLVUILDX = 10,
		UILNVUELVUVLALUE = 11,
		UILNVUNLVUVLALUE = 12,
	}

	/// <summary>
	/// Error codes for OPC_ERR
	/// </summary>
	public enum Errs
	{
	
		// Error codes for OPC_ERR
	
		ULLOCOUSLTACKUFLULL = 1,
		ULLOCOUALDDRUTLAKEN = 2,
		USLESSIONUNLOTUPLRESENT = 3,
		UCLONSISTUELMPTY = 4,
		ULLOCOUNLOTUFLOUND = 5,
		UCLMDURLXUBLUFUOLFLOW = 6,
		UILNVALIDURLEQUEST = 7,
		USLESSIONUCLANCELLED = 8,
	}

	/// <summary>
	/// CBUS Manufacturer definitions
	/// </summary>
	public enum Manufacturer
	{
		// CBUS Manufacturer definitions
		// Where the manufacturer already has an NMRA code, this is used
	
		/// <summary>http://www.merg.co.uk</summary>
		UMLERG = 165,
		/// <summary>http://www.rocrail.net</summary>
		URLOCRAIL = 70,
		/// <summary>http://animatedmodeler.com  (Spectrum Engineering)</summary>
		USLPECTRUM = 80,
	}

	/// <summary>
	/// MODULE TYPES
	/// </summary>
	public enum MergModuleTypes
	{
	
		// MODULE TYPES
	
		// Please note that the existance of a module type id does not necessarily mean that firmware has been implemented
	
		// MERG Module types
	
		/// <summary>default for SLiM nodes</summary>
		USLLIM = 0,
		/// <summary>Solenoid point driver</summary>
		UCLANACC4 = 1,
		/// <summary>Motorised point driver</summary>
		UCLANACC5 = 2,
		/// <summary>8 digital outputs</summary>
		UCLANACC8 = 3,
		/// <summary>Control panel switch/button encoder</summary>
		UCLANACE3 = 4,
		/// <summary>8 digital inputs</summary>
		UCLANACE8C = 5,
		/// <summary>64 led driver</summary>
		UCLANLED = 6,
		/// <summary>64 led driver (multi leds per event)</summary>
		UCLANLED64 = 7,
		/// <summary>12v version of CANACC4</summary>
		UCLANACC4U2L = 8,
		/// <summary>CANCAB hand throttle</summary>
		UCLANCAB = 9,
		/// <summary>CANCMD command station</summary>
		UCLANCMD = 10,
		/// <summary>8 servo driver (on canacc8 or similar hardware)</summary>
		UCLANSERVO = 11,
		/// <summary>BC1a command station</summary>
		UCLANBC = 12,
		/// <summary>RPI and RFID interface</summary>
		UCLANRPI = 13,
		/// <summary>Turntable controller (turntable end)</summary>
		UCLANTTCA = 14,
		/// <summary>Turntable controller (control panel end)</summary>
		UCLANTTCB = 15,
		/// <summary>Handset controller for old BC1a type handsets</summary>
		UCLANHS = 16,
		/// <summary>Track occupancy detector</summary>
		UCLANTOTI = 17,
		/// <summary>8 inputs 8 outputs</summary>
		UCLAN8I8O = 18,
		/// <summary>Canservo with servo position feedback</summary>
		UCLANSERVO8C = 19,
		/// <summary>RFID input</summary>
		UCLANRFID = 20,
		UCLANTC4 = 21,
		/// <summary>16 inputs</summary>
		UCLANACE16C = 22,
		/// <summary>8 way I/O</summary>
		UCLANIO8 = 23,
		/// <summary>??</summary>
		UCLANSNDX = 24,
		/// <summary>Ethernet interface</summary>
		UCLANEther = 25,
		/// <summary>Multiple aspect signalling for CANLED module</summary>
		UCLANSIG64 = 26,
		/// <summary>Multiple aspect signalling for CANACC8 module</summary>
		UCLANSIG8 = 27,
		/// <summary>Conditional event generation</summary>
		UCLANCOND8C = 28,
		/// <summary>Control panel 32/32</summary>
		UCLANPAN = 29,
		/// <summary>Newer version of CANACE3 firmware</summary>
		UCLANACE3C = 30,
		/// <summary>Control panel 64/64</summary>
		UCLANPanel = 31,
		/// <summary>Multiple I/O – Universal CANMIO firmware</summary>
		UCLANMIO = 32,
		/// <summary>Multiple IO module 16 inputs emulating CANACE8C on CANMIO hardware</summary>
		UCLANACE8MIO = 33,
		/// <summary>Solenoid driver module</summary>
		UCLANSOL = 34,
		/// <summary>Universal CANBIP firmware - Bipolar IO module with additional 8 I/O pins (CANMIO family)</summary>
		UCLANBIP = 35,
		/// <summary>Solenoid driver module with additional 6 I/O pins (CANMIO family)</summary>
		UCLANCDU = 36,
		/// <summary>CANACC4 firmware ported to CANCDU</summary>
		UCLANACC4CDU = 37,
		/// <summary>CAN to MiWi base station</summary>
		UCLANWiBase = 38,
		/// <summary>Wireless cab using MiWi protocol</summary>
		UWLiCAB = 39,
		/// <summary>CAN to WiFi connection with Withrottle to CBUS protocol conversion</summary>
		UCLANWiFi = 40,
		/// <summary>Turntable controller configured using FLiM</summary>
		UCLANFTT = 41,
		/// <summary>Handset (alternative to CANCAB)</summary>
		UCLANHNDST = 42,
		/// <summary>Touchscreen handset</summary>
		UCLANTCHNDST = 43,
		/// <summary>multi-channel RFID reader</summary>
		UCLANRFID8 = 44,
		/// <summary>either a 2ch or 8ch RFID reader</summary>
		UCLANmchRFID = 45,
		/// <summary>a Raspberry Pi based module for WiFi</summary>
		UCLANPiWi = 46,
		/// <summary>DC train controller</summary>
		UCLAN4DC = 47,
		/// <summary>Nelevator controller</summary>
		UCLANELEV = 48,
		/// <summary>128 switch inputs</summary>
		UCLANSCAN = 49,
		/// <summary>16MHz 25k80 version of CANSERVO8c on CANMIO hardware</summary>
		UCLANMIOUSLVO = 50,
		/// <summary>16MHz 25k80 version of CANACE8MIO on CANMIO hardware</summary>
		UCLANMIOUILNP = 51,
		/// <summary>16MHz 25k80 version of CANACC8 on CANMIO hardware</summary>
		UCLANMIOUOLUT = 52,
		/// <summary>16MHz 25k80 version of CANACC5 on CANBIP hardware</summary>
		UCLANBIPUOLUT = 53,
		/// <summary>DCC stop generator</summary>
		UCLANASTOP = 54,
		/// <summary>CANCMD with on board 3A booster</summary>
		UCLANCSB = 55,
		/// <summary>Magnet on Track detector</summary>
		UCLANMAG = 56,
		/// <summary>16 input equivaent to CANACE8C</summary>
		UCLANACE16CMIO = 57,
		/// <summary>CBUS module based on Raspberry Pi</summary>
		UCLANPiNODE = 58,
		/// <summary>25K80 version of CANLED64 (IHart and MB)</summary>
		UCLANDISP = 59,
		/// <summary>Compute Event processing engine</summary>
		UCLANCOMPUTE = 60,
		/// <summary>Read/Write from/to RC522 RFID tags</summary>
		UCLANRC522 = 61,
		/// <summary>8 inputs module (2g version of CANACE8c)</summary>
		UCLANINP = 62,
		/// <summary>8 outputs module (2g version of CANACC8)</summary>
		UCLANOUT = 63,
		/// <summary>Extended CANMIO (24 I/O ports)</summary>
		UCLANEMIO = 64,
		/// <summary>DC cab</summary>
		UCLANCABDC = 65,
		/// <summary>DC Railcom detector/reader</summary>
		UCLANRCOM = 66,
	
		// At the time of writing the list of defined MERG module types is maintained by Roger Healey
		// Please liaise with Roger before adding new module types
	
		/// <summary>Software nodes</summary>
		UCLANUSLW = 0xFF,
		/// <summary>Empty module, bootloader only</summary>
		UELMPTY = 0xFE,
		/// <summary>USB interface</summary>
		UCLANUSB = 0xFD,
	}

	/// <summary>
	/// Microchip Processor type codes (identifies to FCU for bootload compatiblity)
	/// </summary>
	public enum MicrochipProcessors
	{
	
		// Microchip Processor type codes (identifies to FCU for bootload compatiblity)
	
		P18F2480 = 1,
		P18F4480 = 2,
		P18F2580 = 3,
		P18F4580 = 4,
		P18F2585 = 5,
		P18F4585 = 6,
		P18F2680 = 7,
		P18F4680 = 8,
		P18F2682 = 9,
		P18F4682 = 10,
		P18F2685 = 11,
		P18F4685 = 12,
	
		P18F25K80 = 13,
		P18F45K80 = 14,
		P18F26K80 = 15,
		P18F46K80 = 16,
		P18F65K80 = 17,
		P18F66K80 = 18,
		P18F14K22 = 19,
		P18F26K83 = 20,
		P18F27Q84 = 21,
		P18F47Q84 = 22,
		P18F27Q83 = 23,
	
		P32MX534F064 = 30,
		P32MX564F064 = 31,
		P32MX564F128 = 32,
		P32MX575F256 = 33,
		P32MX575F512 = 34,
		P32MX764F128 = 35,
		P32MX775F256 = 36,
		P32MX775F512 = 37,
		P32MX795F512 = 38,
	}

	/// <summary>
	/// CBUS opcodes list
	/// </summary>
	public enum OpCodes
	{
	
	
		// CBUS opcodes list
	
		// Packets with no data bytes
	
		/// <summary>General ack</summary>
		UALCK = 0x00,
		/// <summary>General nak</summary>
		UNLAK = 0x01,
		/// <summary>Bus Halt</summary>
		UHLLT = 0x02,
		/// <summary>Bus on</summary>
		UBLON = 0x03,
		/// <summary>Track off</summary>
		UTLOF = 0x04,
		/// <summary>Track on</summary>
		UTLON = 0x05,
		/// <summary>Track stopped</summary>
		UELSTOP = 0x06,
		/// <summary>System reset</summary>
		UALRST = 0x07,
		/// <summary>Request track off</summary>
		URLTOF = 0x08,
		/// <summary>Request track on</summary>
		URLTON = 0x09,
		/// <summary>Request emergency stop all</summary>
		URLESTP = 0x0a,
		/// <summary>Request node status</summary>
		URLSTAT = 0x0c,
		/// <summary>Query nodes</summary>
		UQLNN = 0x0d,
	
		/// <summary>Read node parameters</summary>
		URLQNP = 0x10,
		/// <summary>Request name of module type</summary>
		URLQMN = 0x11,
	
		// Packets with 1 data byte
	
		/// <summary>Release engine by handle</summary>
		UKLLOC = 0x21,
		/// <summary>Query engine by handle</summary>
		UQLLOC = 0x22,
		/// <summary>Keep alive for cab</summary>
		UDLKEEP = 0x23,
	
		/// <summary>Debug message with 1 status byte</summary>
		UDLBG1 = 0x30,
		/// <summary>Extended opcode</summary>
		UELXTC = 0x3F,
	
		// Packets with 2 data bytes
	
		/// <summary>Request session for loco</summary>
		URLLOC = 0x40,
		/// <summary>Query consist</summary>
		UQLCON = 0x41,
		/// <summary>Set node number</summary>
		USLNN = 0x42,
		/// <summary>Allocate loco (used to allocate to a shuttle in cancmd)</summary>
		UALLOC = 0X43,
	
		/// <summary>Set Throttle mode</summary>
		USLTMOD = 0x44,
		/// <summary>Consist loco</summary>
		UPLCON = 0x45,
		/// <summary>De-consist loco</summary>
		UKLCON = 0x46,
		/// <summary>Loco speed/dir</summary>
		UDLSPD = 0x47,
		/// <summary>Set engine flags</summary>
		UDLFLG = 0x48,
		/// <summary>Loco function on</summary>
		UDLFNON = 0x49,
		/// <summary>Loco function off</summary>
		UDLFNOF = 0x4A,
		/// <summary>Service mode status</summary>
		USLSTAT = 0x4C,
		/// <summary>Reset to manufacturer's defaults</summary>
		UNLNRSM = 0x4F,
	
		/// <summary>Request Node number in setup mode</summary>
		URLQNN = 0x50,
		/// <summary>Node number release</summary>
		UNLNREL = 0x51,
		/// <summary>Node number acknowledge</summary>
		UNLNACK = 0x52,
		/// <summary>Set learn mode</summary>
		UNLNLRN = 0x53,
		/// <summary>Release learn mode</summary>
		UNLNULN = 0x54,
		/// <summary>Clear all events</summary>
		UNLNCLR = 0x55,
		/// <summary>Read available event slots</summary>
		UNLNEVN = 0x56,
		/// <summary>Read all stored events</summary>
		UNLERD = 0x57,
		/// <summary>Read number of stored events</summary>
		URLQEVN = 0x58,
		/// <summary>Write acknowledge</summary>
		UWLRACK = 0x59,
		/// <summary>Request node data event</summary>
		URLQDAT = 0x5A,
		/// <summary>Request short data frame</summary>
		URLQDDS = 0x5B,
		/// <summary>Put node into boot mode</summary>
		UBLOOT = 0x5C,
		/// <summary>Force can_id self enumeration</summary>
		UELNUM = 0x5D,
		/// <summary>Reset node (as in restart)</summary>
		UNLNRST = 0x5E,
		/// <summary>Extended opcode with 1 data byte</summary>
		UELXTC1 = 0x5F,
	
		// Packets with 3 data bytes
	
		/// <summary>Set engine functions</summary>
		UDLFUN = 0x60,
		/// <summary>Get loco (with support for steal/share)</summary>
		UGLLOC = 0x61,
		/// <summary>Command station error</summary>
		UELRR = 0x63,
		/// <summary>Errors from nodes during config</summary>
		UCLMDERR = 0x6F,
	
		/// <summary>Event slots left response</summary>
		UELVNLF = 0x70,
		/// <summary>Request read of node variable</summary>
		UNLVRD = 0x71,
		/// <summary>Request read stored event by index</summary>
		UNLENRD = 0x72,
		/// <summary>Request read module parameters</summary>
		URLQNPN = 0x73,
		/// <summary>Number of events stored response</summary>
		UNLUMEV = 0x74,
		/// <summary>Set canid</summary>
		UCLANID = 0x75,
		/// <summary>Extended opcode with 2 data bytes</summary>
		UELXTC2 = 0x7F,
	
		// Packets with 4 data bytes
	
		/// <summary>3 byte DCC packet</summary>
		URLDCC3 = 0x80,
		/// <summary>Write CV byte Ops mode by handle</summary>
		UWLCVO = 0x82,
		/// <summary>Write CV bit Ops mode by handle</summary>
		UWLCVB = 0x83,
		/// <summary>Read CV</summary>
		UQLCVS = 0x84,
		/// <summary>Report CV</summary>
		UPLCVS = 0x85,
	
		/// <summary>on event</summary>
		UALCON = 0x90,
		/// <summary>off event</summary>
		UALCOF = 0x91,
		/// <summary>Accessory Request event</summary>
		UALREQ = 0x92,
		/// <summary>Accessory response event on</summary>
		UALRON = 0x93,
		/// <summary>Accessory response event off</summary>
		UALROF = 0x94,
		/// <summary>Unlearn event</summary>
		UELVULN = 0x95,
		/// <summary>Set a node variable</summary>
		UNLVSET = 0x96,
		/// <summary>Node variable value response</summary>
		UNLVANS = 0x97,
		/// <summary>Short event on</summary>
		UALSON = 0x98,
		/// <summary>Short event off</summary>
		UALSOF = 0x99,
		/// <summary>Short Request event</summary>
		UALSRQ = 0x9A,
		/// <summary>Single node parameter response</summary>
		UPLARAN = 0x9B,
		/// <summary>Request read of event variable</summary>
		URLEVAL = 0x9C,
		/// <summary>Accessory short response on event</summary>
		UALRSON = 0x9D,
		/// <summary>Accessory short response off event</summary>
		UALRSOF = 0x9E,
		/// <summary>Extended opcode with 3 data bytes</summary>
		UELXTC3 = 0x9F,
	
		// Packets with 5 data bytes
	
		/// <summary>4 byte DCC packet</summary>
		URLDCC4 = 0xA0,
		/// <summary>Write CV service mode</summary>
		UWLCVS = 0xA2,
	
		/// <summary>On event with one data byte</summary>
		UALCON1 = 0xB0,
		/// <summary>Off event with one data byte</summary>
		UALCOF1 = 0xB1,
		/// <summary>Read event variable in learn mode</summary>
		URLEQEV = 0xB2,
		/// <summary>Accessory on response (1 data byte)</summary>
		UALRON1 = 0xB3,
		/// <summary>Accessory off response (1 data byte)</summary>
		UALROF1 = 0xB4,
		/// <summary>Event variable by index read response</summary>
		UNLEVAL = 0xB5,
		/// <summary>Response to QNN</summary>
		UPLNN = 0xB6,
		/// <summary>Accessory short on with 1 data byte</summary>
		UALSON1 = 0xB8,
		/// <summary>Accessory short off with 1 data byte</summary>
		UALSOF1 = 0xB9,
		/// <summary>Short response event on with one data byte</summary>
		UALRSON1 = 0xBD,
		/// <summary>Short response event off with one data byte</summary>
		UALRSOF1 = 0xBE,
		/// <summary>Extended opcode with 4 data bytes</summary>
		UELXTC4 = 0xBF,
	
		// Packets with 6 data bytes
	
		/// <summary>5 byte DCC packet</summary>
		URLDCC5 = 0xC0,
		/// <summary>Write CV ops mode by address</summary>
		UWLCVOA = 0xC1,
		/// <summary>Cab data (cab signalling)</summary>
		UCLABDAT = 0xC2,
		/// <summary>Fast clock</summary>
		UFLCLK = 0xCF,
	
		/// <summary>On event with two data bytes</summary>
		UALCON2 = 0xD0,
		/// <summary>Off event with two data bytes</summary>
		UALCOF2 = 0xD1,
		/// <summary>Teach event</summary>
		UELVLRN = 0xd2,
		/// <summary>Event variable read response in learn mode</summary>
		UELVANS = 0xd3,
		/// <summary>Accessory on response</summary>
		UALRON2 = 0xD4,
		/// <summary>Accessory off response</summary>
		UALROF2 = 0xD5,
		/// <summary>Accessory short on with 2 data bytes</summary>
		UALSON2 = 0xD8,
		/// <summary>Accessory short off with 2 data bytes</summary>
		UALSOF2 = 0xD9,
		/// <summary>Short response event on with two data bytes</summary>
		UALRSON2 = 0xDD,
		/// <summary>Short response event off with two data bytes</summary>
		UALRSOF2 = 0xDE,
		/// <summary>Extended opcode with 5 data bytes</summary>
		UELXTC5 = 0xDF,
	
		// Packets with 7 data bytes
	
		/// <summary>6 byte DCC packets</summary>
		URLDCC6 = 0xE0,
		/// <summary>Loco session report</summary>
		UPLLOC = 0xE1,
		/// <summary>Module name response</summary>
		UNLAME = 0xE2,
		/// <summary>Command station status report</summary>
		USLTAT = 0xE3,
		/// <summary>CBUS long message packet</summary>
		UDLTXC = 0xE9,
		/// <summary>Node parameters response</summary>
		UPLARAMS = 0xEF,
	
		/// <summary>On event with 3 data bytes</summary>
		UALCON3 = 0xF0,
		/// <summary>Off event with 3 data bytes</summary>
		UALCOF3 = 0xF1,
		/// <summary>Read node events response</summary>
		UELNRSP = 0xF2,
		/// <summary>Accessory on response</summary>
		UALRON3 = 0xF3,
		/// <summary>Accessory off response</summary>
		UALROF3 = 0xF4,
		/// <summary>Teach event using event indexing</summary>
		UELVLRNI = 0xF5,
		/// <summary>Accessory data event: 5 bytes of node data (eg: RFID)</summary>
		UALCDAT = 0xF6,
		/// <summary>Accessory data response</summary>
		UALRDAT = 0xF7,
		/// <summary>Accessory short on with 3 data bytes</summary>
		UALSON3 = 0xF8,
		/// <summary>Accessory short off with 3 data bytes</summary>
		UALSOF3 = 0xF9,
		/// <summary>Short data frame aka device data event (device id plus 5 data bytes)</summary>
		UDLDES = 0xFA,
		/// <summary>Short data frame response aka device data response</summary>
		UDLDRS = 0xFB,
		/// <summary>Device Data Write Short</summary>
		UDLDWS = 0xFC,
		/// <summary>Short response event on with 3 data bytes</summary>
		UALRSON3 = 0xFD,
		/// <summary>Short response event off with 3 data bytes</summary>
		UALRSOF3 = 0xFE,
		/// <summary>Extended opcode with 6 data byes</summary>
		UELXTC6 = 0xFF,
	}

	/// <summary>
	/// Flags in PAR_FLAGS
	/// </summary>
	public enum ParamFlags
	{
	
		// Flags in PAR_FLAGS
	
		/// <summary>Modules doesn't support events</summary>
		UNLOEVENTS = 0,
		/// <summary>Module is a consumer of events</summary>
		UCLONSUMER = 1,
		/// <summary>Module is a producer of events</summary>
		UPLRODUCER = 2,
		/// <summary>Module is both a consumer and producer of events</summary>
		UCLOMBI = 3,
		/// <summary>Module is in FLiM mode</summary>
		UFLLiM = 4,
		/// <summary>Module supports the FCU bootloader protocol</summary>
		UBLOOT = 8,
		/// <summary>Module can consume its own events</summary>
		UCLOE = 16,
		/// <summary>Module is in learn mode</summary>
		ULLRN = 32,
	}

	/// <summary>
	/// Offsets to other values stored at the top of the parameter block.
	/// </summary>
	public enum ParamOffsetsPic
	{
	
		// Offsets to other values stored at the top of the parameter block.
		// These are not returned by opcode PARAN, but are present in the hex
		// file for FCU.
	
		/// <summary>Number of parameters implemented</summary>
		UCLOUNT = 0x18,
		/// <summary>4 byte Address of Module type name, up to 8 characters null terminated</summary>
		UNLAME = 0x1A,
		/// <summary>Checksum word at end of parameters</summary>
		UCLKSUM = 0x1E,
	}

	/// <summary>
	/// Parameter index numbers (readable by OPC_RQNPN, returned in OPC_PARAN)
	/// </summary>
	public enum Params
	{
	
	
		// Parameter index numbers (readable by OPC_RQNPN, returned in OPC_PARAN)
		// Index numbers count from 1, subtract 1 for offset into parameter block
		// Note that RQNPN with index 0 returns the parameter count
	
		/// <summary>Manufacturer id</summary>
		UMLANU = 1,
		/// <summary>Minor version letter</summary>
		UMLINVER = 2,
		/// <summary>Module type code</summary>
		UMLTYP = 3,
		/// <summary>Number of events supported</summary>
		UELVTNUM = 4,
		/// <summary>Event variables per event</summary>
		UELVNUM = 5,
		/// <summary>Number of Node variables</summary>
		UNLVNUM = 6,
		/// <summary>Major version number</summary>
		UMLAJVER = 7,
		/// <summary>Node flags</summary>
		UFLLAGS = 8,
		/// <summary>Processor type</summary>
		UCLPUID = 9,
		/// <summary>Bus type</summary>
		UBLUSTYPE = 10,
		/// <summary>load address, 4 bytes</summary>
		ULLOAD = 11,
		/// <summary>CPU manufacturer's id as read from the chip config space, 4 bytes (note - read from cpu at runtime, so not included in checksum)</summary>
		UCLPUMID = 15,
		/// <summary> CPU manufacturer code</summary>
		UCLPUMAN = 19,
		/// <summary>Beta revision (numeric), or 0 if release</summary>
		UBLETA = 20,
	}

	/// <summary>
	/// Processor manufacturer codes
	/// </summary>
	public enum ProcessorManufacturers
	{
	
		// Processor manufacturer codes
	
		UMLICROCHIP = 1,
		UALTMEL = 2,
		UALRM = 3,
	}

	/// <summary>
	/// Rocrail Module types
	/// </summary>
	public enum RocRailModuleTypes
	{
	
		// Rocrail Module types
	
		/// <summary>RS232 PC interface</summary>
		UCLANGC1 = 1,
		/// <summary>16 I/O</summary>
		UCLANGC2 = 2,
		/// <summary>Command station (derived from cancmd)</summary>
		UCLANGC3 = 3,
		/// <summary>8 channel RFID reader</summary>
		UCLANGC4 = 4,
		/// <summary>Cab for fixed panels (derived from cancab)</summary>
		UCLANGC5 = 5,
		/// <summary>4 channel servo controller</summary>
		UCLANGC6 = 6,
		/// <summary>Fast clock module</summary>
		UCLANGC7 = 7,
		/// <summary>CAN<->Ethernet interface</summary>
		UCLANGC1e = 11,
	}

	/// <summary>
	/// Status codes for OPC_SSTAT
	/// </summary>
	public enum SStats
	{
	
		// Status codes for OPC_SSTAT
	
		UNLOUALCK = 1,
		UOLVLD = 2,
		UWLRUALCK = 3,
		UBLUSY = 4,
		UCLVUELRROR = 5,
	}

	/// <summary>
	/// Spectrum Engineering Animated Modeller module types
	/// </summary>
	public enum SpectrumModuleTypes
	{
	
		// Spectrum Engineering Animated Modeller module types
	
		/// <summary>Animation controller (firmware derived from cancmd)</summary>
		UALMCTRLR = 1,
		/// <summary>Dual cab based on cancab</summary>
		UDLUALCAB = 2,
	}

	/// <summary>
	/// Modes for STMOD
	/// </summary>
	public enum StmodModes
	{
	
	
		// Modes for STMOD
	
		USLPDUMLASK = 3,
		USLPDU1L28 = 0,
		USLPDU1L4 = 1,
		USLPDU2L8I = 2,
		USLPDU2L8 = 3,
	}

}
